/*
Deployment script for yourmelodydb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "yourmelodydb"
:setvar DefaultFilePrefix "yourmelodydb"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Answers]...';


GO
CREATE TABLE [dbo].[Answers] (
    [Id]       INT              IDENTITY (1, 1) NOT NULL,
    [GameId]   UNIQUEIDENTIFIER NOT NULL,
    [SongId]   UNIQUEIDENTIFIER NOT NULL,
    [Points]   FLOAT (53)       NOT NULL,
    [PlayerId] UNIQUEIDENTIFIER NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[GameModes]...';


GO
CREATE TABLE [dbo].[GameModes] (
    [Id]   INT           NOT NULL,
    [Name] NVARCHAR (25) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Games]...';


GO
CREATE TABLE [dbo].[Games] (
    [Id]         UNIQUEIDENTIFIER NOT NULL,
    [GameModeId] INT              NOT NULL,
    [IsEnded]    BIT              NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Players]...';


GO
CREATE TABLE [dbo].[Players] (
    [Id]       UNIQUEIDENTIFIER NOT NULL,
    [Name]     NVARCHAR (25)    NOT NULL,
    [GameId]   UNIQUEIDENTIFIER NOT NULL,
    [Points]   FLOAT (53)       NOT NULL,
    [Rounds]   INT              NOT NULL,
    [UserId]   UNIQUEIDENTIFIER NULL,
    [IsActive] BIT              NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Playlists]...';


GO
CREATE TABLE [dbo].[Playlists] (
    [Id]          UNIQUEIDENTIFIER NOT NULL,
    [GameId]      UNIQUEIDENTIFIER NULL,
    [URI]         NVARCHAR (MAX)   NULL,
    [Name]        NVARCHAR (50)    NULL,
    [Description] NVARCHAR (MAX)   NULL,
    [Likes]       INT              NOT NULL,
    [Dislikes]    INT              NOT NULL,
    [IsActive]    BIT              NOT NULL,
    [IsApproved]  BIT              NOT NULL,
    [WasPlayed]   BIT              NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Songs]...';


GO
CREATE TABLE [dbo].[Songs] (
    [Id]         UNIQUEIDENTIFIER NOT NULL,
    [Title]      NVARCHAR (255)   NOT NULL,
    [Artist]     NVARCHAR (255)   NOT NULL,
    [VideoUrl]   NVARCHAR (255)   NOT NULL,
    [AudioUrl]   NVARCHAR (255)   NOT NULL,
    [PlaylistId] UNIQUEIDENTIFIER NOT NULL,
    [SecToStart] INT              NOT NULL,
    [IsActive]   BIT              NOT NULL,
    [WasPlayed]  BIT              NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [Id]    UNIQUEIDENTIFIER NOT NULL,
    [Name]  NVARCHAR (25)    NOT NULL,
    [Email] NVARCHAR (50)    NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Games]...';


GO
ALTER TABLE [dbo].[Games]
    ADD DEFAULT 0 FOR [IsEnded];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Players]...';


GO
ALTER TABLE [dbo].[Players]
    ADD DEFAULT 0 FOR [Points];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Players]...';


GO
ALTER TABLE [dbo].[Players]
    ADD DEFAULT 0 FOR [Rounds];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Players]...';


GO
ALTER TABLE [dbo].[Players]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Playlists]...';


GO
ALTER TABLE [dbo].[Playlists]
    ADD DEFAULT 0 FOR [Likes];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Playlists]...';


GO
ALTER TABLE [dbo].[Playlists]
    ADD DEFAULT 0 FOR [Dislikes];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Playlists]...';


GO
ALTER TABLE [dbo].[Playlists]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Playlists]...';


GO
ALTER TABLE [dbo].[Playlists]
    ADD DEFAULT 0 FOR [IsApproved];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Playlists]...';


GO
ALTER TABLE [dbo].[Playlists]
    ADD DEFAULT 0 FOR [WasPlayed];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Songs]...';


GO
ALTER TABLE [dbo].[Songs]
    ADD DEFAULT 0 FOR [SecToStart];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Songs]...';


GO
ALTER TABLE [dbo].[Songs]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Songs]...';


GO
ALTER TABLE [dbo].[Songs]
    ADD DEFAULT 0 FOR [WasPlayed];


GO
PRINT N'Creating Foreign Key [dbo].[FK_Answers_ToGame]...';


GO
ALTER TABLE [dbo].[Answers]
    ADD CONSTRAINT [FK_Answers_ToGame] FOREIGN KEY ([GameId]) REFERENCES [dbo].[Games] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Answers_ToSong]...';


GO
ALTER TABLE [dbo].[Answers]
    ADD CONSTRAINT [FK_Answers_ToSong] FOREIGN KEY ([SongId]) REFERENCES [dbo].[Songs] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Answers_ToPlayer]...';


GO
ALTER TABLE [dbo].[Answers]
    ADD CONSTRAINT [FK_Answers_ToPlayer] FOREIGN KEY ([PlayerId]) REFERENCES [dbo].[Players] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Games_ToGameMode]...';


GO
ALTER TABLE [dbo].[Games]
    ADD CONSTRAINT [FK_Games_ToGameMode] FOREIGN KEY ([GameModeId]) REFERENCES [dbo].[GameModes] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Players_ToGame]...';


GO
ALTER TABLE [dbo].[Players]
    ADD CONSTRAINT [FK_Players_ToGame] FOREIGN KEY ([GameId]) REFERENCES [dbo].[Games] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Players_ToUser]...';


GO
ALTER TABLE [dbo].[Players]
    ADD CONSTRAINT [FK_Players_ToUser] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Playlists_ToGame]...';


GO
ALTER TABLE [dbo].[Playlists]
    ADD CONSTRAINT [FK_Playlists_ToGame] FOREIGN KEY ([GameId]) REFERENCES [dbo].[Games] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Songs_ToPlaylist]...';


GO
ALTER TABLE [dbo].[Songs]
    ADD CONSTRAINT [FK_Songs_ToPlaylist] FOREIGN KEY ([PlaylistId]) REFERENCES [dbo].[Playlists] ([Id]);


GO
PRINT N'Creating Procedure [dbo].[spAnswers_Add]...';


GO
CREATE PROCEDURE [dbo].[spAnswers_Add]
	@gameId uniqueidentifier,
	@playerId uniqueidentifier,
	@songId uniqueidentifier
AS
	INSERT INTO [dbo].Answers(GameId,PlayerId,SongId,Points)
	VALUES(@gameId,@playerId,@songId,0)
GO
PRINT N'Creating Procedure [dbo].[spAnswers_AddPoints]...';


GO
CREATE PROCEDURE [dbo].[spAnswers_AddPoints]
	@gameId uniqueidentifier,
	@playerId uniqueidentifier,
	@songId uniqueidentifier,
	@points float
AS
	UPDATE [dbo].Answers 
	SET Points = @points
	WHERE GameId = @gameId AND PlayerId = @playerId AND SongId = @songId
GO
PRINT N'Creating Procedure [dbo].[spGame_Add]...';


GO
CREATE PROCEDURE [dbo].[spGame_Add]
	@Id uniqueidentifier,
	@GameMode int
AS
	INSERT INTO [dbo].[Games](Id,GameModeId) VALUES(@Id,@GameMode);
GO
PRINT N'Creating Procedure [dbo].[spGame_GetAll]...';


GO
CREATE PROCEDURE [dbo].[spGame_GetAll]
AS
	SELECT *
	FROM [dbo].[Games]
GO
PRINT N'Creating Procedure [dbo].[spGame_GetById]...';


GO
CREATE PROCEDURE [dbo].[spGame_GetById]
	@GameId uniqueidentifier
AS
	SELECT *
	FROM [dbo].[Games] g
	WHERE @GameId = g.Id
GO
PRINT N'Creating Procedure [dbo].[spPlayer_Add]...';


GO
CREATE PROCEDURE [dbo].[spPlayer_Add]
	@Id uniqueidentifier,
	@Name nvarchar(25),
	@GameId uniqueidentifier,
	@UserId uniqueidentifier = null
AS
	INSERT INTO [dbo].[Players](Id,[Name],GameId,UserId) VALUES(@Id,@Name,@GameId,@UserId);
GO
PRINT N'Creating Procedure [dbo].[spPlayer_AddPoints]...';


GO
CREATE PROCEDURE [dbo].[spPlayer_AddPoints]
	@playerId uniqueidentifier,
	@points float
AS
	UPDATE [dbo].[Players] SET Points = @points
	WHERE Id = @playerId
GO
PRINT N'Creating Procedure [dbo].[spPlayer_AddRound]...';


GO
CREATE PROCEDURE [dbo].[spPlayer_AddRound]
	@playerId uniqueidentifier,
	@rounds int
AS
	UPDATE [dbo].[Players] SET Rounds = Rounds + @rounds
	WHERE Id = @playerId
GO
PRINT N'Creating Procedure [dbo].[spPlayer_Delete]...';


GO
CREATE PROCEDURE [dbo].[spPlayer_Delete]
	@playerId uniqueidentifier
AS
	UPDATE [dbo].Players SET [IsActive] = 0
	WHERE Id = @playerId
GO
PRINT N'Creating Procedure [dbo].[spPlayer_Edit]...';


GO
CREATE PROCEDURE [dbo].[spPlayer_Edit]
	@playerId uniqueidentifier,
	@NewName nvarchar(25)
AS
	UPDATE [dbo].Players SET [Name] = @NewName
	WHERE Id = @playerId
GO
PRINT N'Creating Procedure [dbo].[spPlayer_GetByGameId]...';


GO
CREATE PROCEDURE [dbo].[spPlayer_GetByGameId]
	@GameId uniqueidentifier
AS
	SELECT *
	FROM [dbo].[Players] p
	WHERE @GameId = p.GameId AND [IsActive] = 1
GO
PRINT N'Creating Procedure [dbo].[spPlayer_GetBySongId]...';


GO
CREATE PROCEDURE [dbo].[spPlayer_GetBySongId]
	@songId uniqueidentifier
AS
	SELECT p.Id,p.GameId,p.[Name],p.Points,p.Rounds,p.UserId FROM [dbo].[Songs] s
	LEFT JOIN [dbo].[Answers] a ON a.SongId = s.Id
	LEFT JOIN [dbo].[Players] p ON p.Id = a.PlayerId
	WHERE s.Id = @songId AND p.IsActive = 1
GO
PRINT N'Creating Procedure [dbo].[spPlaylist_Add]...';


GO
CREATE PROCEDURE [dbo].[spPlaylist_Add]
	@Id uniqueidentifier,
	@GameId uniqueidentifier
AS
	INSERT INTO [dbo].[Playlists](Id,GameId) 
	VALUES(@Id,@GameId)
GO
PRINT N'Creating Procedure [dbo].[spPlaylist_AddApproved]...';


GO
CREATE PROCEDURE [dbo].[spPlaylist_AddApproved]
	@Id uniqueidentifier,
	@URI nvarchar(MAX),
	@Name nvarchar(50),
	@Description nvarchar(MAX)
AS
	INSERT INTO [dbo].[Playlists](Id,URI,[Name],[Description],IsApproved)
	VALUES(@Id,@URI,@Name,@Description,1)
GO
PRINT N'Creating Procedure [dbo].[spPlaylist_DeleteApproved]...';


GO
CREATE PROCEDURE [dbo].[spPlaylist_DeleteApproved]
	@Id uniqueidentifier
AS
	UPDATE [dbo].[Playlists] SET IsActive = 0
	WHERE Id = @Id AND IsApproved = 1
GO
PRINT N'Creating Procedure [dbo].[spPlaylist_GetApproved]...';


GO
CREATE PROCEDURE [dbo].[spPlaylist_GetApproved]
AS
	SELECT *
	FROM [dbo].[Playlists] p
	WHERE IsApproved = 1 AND IsActive = 1
GO
PRINT N'Creating Procedure [dbo].[spPlaylist_GetApprovedById]...';


GO
CREATE PROCEDURE [dbo].[spPlaylist_GetApprovedById]
	@Id uniqueidentifier
AS
	SELECT *
	FROM [dbo].[Playlists] p
	WHERE Id = @Id AND IsActive = 1 AND IsApproved = 1
GO
PRINT N'Creating Procedure [dbo].[spPlaylist_GetByGameId]...';


GO
CREATE PROCEDURE [dbo].[spPlaylist_GetByGameId]
	@GameId uniqueidentifier
AS
	SELECT *
	FROM [dbo].[Playlists] p
	WHERE @GameId = p.GameId AND IsActive = 1
GO
PRINT N'Creating Procedure [dbo].[spPlaylist_LikeApproved]...';


GO
CREATE PROCEDURE [dbo].[spPlaylist_LikeApproved]
	@Id uniqueidentifier
AS
	UPDATE [dbo].[Playlists] SET Likes = Likes + 1
	WHERE Id = @Id AND IsApproved = 1
GO
PRINT N'Creating Procedure [dbo].[spPlaylist_UnLikeApproved]...';


GO
CREATE PROCEDURE [dbo].[spPlaylist_UnLikeApproved]
	@Id uniqueidentifier
AS
	UPDATE [dbo].[Playlists] SET Dislikes = Dislikes + 1
	WHERE Id = @Id AND IsApproved = 1
GO
PRINT N'Creating Procedure [dbo].[spSong_Add]...';


GO
CREATE PROCEDURE [dbo].[spSong_Add]
	@Id uniqueidentifier,
	@Title nvarchar(255),
	@Artist nvarchar(255),
	@VideoUrl nvarchar(255),
	@AudioUrl nvarchar(255),
	@PlaylistId uniqueidentifier,
	@SecToStart int
AS
	INSERT INTO [dbo].[Songs](Id,Title,Artist,VideoUrl,AudioUrl,PlaylistId,SecToStart)
	VALUES(@Id,@Title,@Artist,@VideoUrl,@AudioUrl,@PlaylistId,@SecToStart)
GO
PRINT N'Creating Procedure [dbo].[spSong_GetByPlaylistId]...';


GO
CREATE PROCEDURE [dbo].[spSong_GetByPlaylistId]
	@PlaylistId uniqueidentifier
AS
	SELECT *
	FROM [dbo].[Songs] s
	WHERE @PlaylistId = s.PlaylistId
GO
PRINT N'Creating Procedure [dbo].[spSong_SetAsPlayed]...';


GO
CREATE PROCEDURE [dbo].[spSong_SetAsPlayed]
	@songId uniqueidentifier
AS
	UPDATE [dbo].Songs SET WasPlayed = 1
	WHERE Id = @songId;
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
